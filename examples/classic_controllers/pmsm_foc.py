import gym_electric_motor as gem
from gym_electric_motor.reference_generators import MultipleReferenceGenerator, ConstReferenceGenerator, \
    WienerProcessReferenceGenerator
from gym_electric_motor.visualization import MotorDashboard

from examples.agents.simple_controllers import Controller
import time
import sys, os

"""Run this file from within the 'examples' folder:
>> cd examples
>> python pmsm_foc.py
Description:
        Environment to control a continuously controlled permanent magnet synchronous motor(PMSM).

        Controlled Quantity: 'omega' and 'i_sq'

        Limitations: Physical limitations of the motor will be current

        Converter : B6BridgeConverter from converters.py
"""
sys.path.append(os.path.abspath(os.path.join('..')))
if __name__ == '__main__':

    # Changing i_q reference and constant 0 i_d reference.
    q_generator = WienerProcessReferenceGenerator(reference_state='i_sq')
    d_generator = ConstReferenceGenerator('i_sd', 0)
    rg = MultipleReferenceGenerator([d_generator, q_generator])
    """
           Continuous mode: The action is the average (normalized) voltage per time step which is assumed to be transferred 
           to a PWM converter to generate the switching sequence.

           Discrete mode: The action is the switching state of the power converter i.e., a quantity from a discrete set of
                          switching states which can be generated by the converter.   


    """
    env = gem.make(
        'emotor-pmsm-cont-v1',
        visualization=MotorDashboard(plots=['u_sd', 'u_sq', 'i_sd', 'i_sq', 'omega']), visu_period=1,
        control_space='dq',

    )

    controller = Controller.make('foc_controller', env)
    state, reference = env.reset()
    start = time.time()
    cum_rew = 0
    for i in range(100000):
        env.render()
        action = controller.control(state, reference)
        (state, reference), reward, done, _ = env.step(action)
        if done:
            env.reset()
        cum_rew += reward
    print('final cumulative reward is ', cum_rew)
